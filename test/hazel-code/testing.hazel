# this is a comment

let num : Int = 1 in
let add_one : Int -> Int =
    fun x -> x + 1
in

let mult_and_inc: ((Int, Int)) -> Int = 
    fun ((num, mult)) -> add_one(num * mult)
in

let stuff : (Int, Int) -> (Int, Int) = 
    fun (x, y) ->
        case (x + 1, y + 1)
            | (1, 2) as z => (mult_and_inc(z), 0)
            | (0, 0) => (0, 0)
            | _ => (inc(1), 1)
        end
in

let stringEquals = "hi" $== "hi" in

let has_two_elements: [Int] -> Bool = 
    fun xs ->
        case xs
            | nil => false
            | hd::nil => false
            | a::b::nil => true   
        end
in

stuff(num, 2)
